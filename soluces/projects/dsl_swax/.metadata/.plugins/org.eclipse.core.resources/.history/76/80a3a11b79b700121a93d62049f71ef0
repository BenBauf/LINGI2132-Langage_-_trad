
package simulation

import scala.collection.mutable.PriorityQueue
import simulation.api.Stats
import simulation.api.Population
import org.jfree.data.general.DefaultPieDataset
import org.jfree.chart.ChartFactory
import org.jfree.data.xy.XYDataset
import org.jfree.data.xy.XYSeries
import scala.collection.immutable.Queue
import org.jfree.data.xy.XYSeriesCollection
import org.jfree.chart.plot.PlotOrientation
import org.jfree.chart.ChartPanel
import simulation.api.Population
import javax.swing.JFrame
import javax.swing.JPanel

class Point(val value: Int, val time: Double) {}

object Point {
  def apply(value: Int, time: Double) = new Point(value, time)
}

class SimModel() {
  private val eventQueue = new PriorityQueue[SimEvent]()
  private var currentTime = 0.0

  def clock = currentTime

  val statsRecord = collection.mutable.Map[String, Queue[Point]]()

  def recordStats(stats: Stats, time: Double) {
    for ((name, value) <- stats.stats) {
      if (statsRecord contains name) {
        statsRecord += (name -> ((statsRecord(name)) + Point(value, time)))
      } else {
        statsRecord += (name -> Queue[Point](Point(value, time)))
      }
    }
  }

  def displayStats() {
    var queue: Queue[Point] = statsRecord(simulation.constants.subscribedNbrS)
    val xySerie = new XYSeries(simulation.constants.subscribedNbrS)

    for (point <- queue) {
      println(point.time + " " + point.value)
      xySerie.add(point.time, point.value)
    }

    val xySerieCollection = new XYSeriesCollection(xySerie)

    val chart = ChartFactory.createXYLineChart("title",
      "xAxisLabel", "yAxisLabel", xySerieCollection, PlotOrientation.VERTICAL, false, false, false)
    val chartPanel = new ChartPanel(chart);

    val panel = new JPanel()
    panel.add(chartPanel).setVisible(true)
    val frame = new JFrame()
    frame.add(panel)
    frame.setVisible(true)
    frame.pack()
    frame.setLocationRelativeTo(null)
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    //createXYChart(
    // simulation.constants.subscribedNbrS, "X", "Y", xyDataSet, true)

  }

  def simulate(horizon: Int, population: Population) {

    var statsInterval = horizon / 1000
    var intervalCounter = 0

    recordStats(population.getStats, 0)

    while (eventQueue.nonEmpty) {
      val e = eventQueue.dequeue()
      currentTime = e.time
      if (currentTime <= horizon) {
        //if(currentTime>statsInterval*intervalCounter){
        recordStats(population.getStats, currentTime)
        //}
        e.process()
      } else {
        currentTime = horizon
        displayStats()
        return
      }
    }
  }

  def wait(duration: Int)(block: => Unit) {
    eventQueue += new SimEvent(clock + duration, block)
  }
}