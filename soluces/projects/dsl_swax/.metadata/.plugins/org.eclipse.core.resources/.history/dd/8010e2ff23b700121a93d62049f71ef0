package simulation.api

import simulation.SimModel
import simulation.Person

object Population {
  def apply(maxPop:Int, simDuration: Int) = new Population(maxPop, simDuration)
}

class Population(val maxPop:Int, val simDuration: Int) {
	val model = new SimModel()
	
	val population = new Array[Person](maxPop) //all the population
	val alive = collection.mutable.Set[Int]() //alive population
	val subscribed = collection.mutable.Set[Int]() //subscribed population
	val friendship = collection.mutable.Map[Int, collection.mutable.Set[Int]]() //friendlists
	
	def born(index: Int) {
	  alive += index
	  population(index) born
	}
	
	def kill(index: Int) {
	  alive -= index
	  population(index) die
	}
	
	def subscribe(index: Int) {
	  val wasUnsubscribed = subscribed add index
	  if(wasUnsubscribed) {
	    friendship += (index -> collection.mutable.Set[Int]())
	  }
	}
	
	def unsubscribe(index: Int) {
	  val wasSubscribed = subscribed remove index
	  if(wasSubscribed) {
	    friendship -= index
	  }
	}
	
	def addFriend(id1: Int, id2: Int) {
	  if((subscribed contains id1) && (subscribed contains id2)) {
	    friendship(id1) += id2
	    friendship(id2) += id1
	  }
	}
	
	def removeFriend(id1: Int, id2: Int) {
	  if((subscribed contains id1) && (subscribed contains id2)) {
	    friendship(id1) -= id2
	    friendship(id2) -= id1
	  }
	}
}