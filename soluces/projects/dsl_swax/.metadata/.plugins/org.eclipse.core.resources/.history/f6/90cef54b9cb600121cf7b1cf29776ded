import scala.collection.mutable.HashMap
import scala.collection.mutable.LinkedList
import scala.collection.mutable.LinkedHashSet

class Population(
  val model: SimModel, val dayDuration: Int) {

  val rand = new GetRandom()

  //Data structures
  var population = Map[Int, Person]()
  var subscribed = Set[Int]()

  //Relations
  var friendship = Map[Int, Set[Int]]() //NB: friendship on social network

  var index = 0 //Assign person identifier
  var SIM_DURATION = dayDuration / 365 //In year

  //Probabilities
  var subscribedP = 0.1
  var isFemaleP = 0.5
  var singleP = 0.5
  var socialRLP = 0.5
  var socialRMP = 0.3
  var socialRHP = 0.2
  var haveJobP = 0.8
  var isCrazyP = 0.01

  def init(number: Int) {
    for (i <- 0 to number) {
      val p = personCreator(index)
      addToPop(index, p)
      if (p.subscribed) {
         p.subscribed = false
         subscribe(index)
      }
      index += 1
    }
  }

  def addToPop(index: Int, p: Person) {
    population += (index -> p)
  }

  def subscribe(i: Int) {
    val person = population(i)
    if (!person.subscribed) {
      person.subscribed = true
      subscribed += i
      friendship += (i -> Set[Int]())
    }
  }

  def unsubscribe(i: Int) {
    val person: Person = population(i)
    if (person.subscribed) {
      person.subscribed = false
      subscribed -= i
      val friendSet = friendship(i)
      for(friend <- friendSet) {
        removeFriend(i, friend)
      }
      friendship -= i
    }
  }
  
  def removeFromPop(i: Int) {
    unsubscribe(i)
    population -= i
  }

  def personCreator(index: Int) = {
    var subscribed = false
    var sex = 'm'
    var single = false
    var socialRank = "high"
    var haveJob = false
    var isCrazy = false

    if (rand.happens(subscribedP)) {
      subscribed = true
    }
    if (rand.happens(isFemaleP)) {
      sex = 'f'
    }
    if (rand.happens(singleP)) {
      single = true
    }

    var socialRRes = rand.which(socialRLP, socialRMP, socialRHP)
    if (socialRRes == 1) {
      socialRank = "low"
    } else if (socialRRes == 2) {
      socialRank = "medium"
    } else {
      socialRank == "high"
    }
    if (rand.happens(haveJobP)) {
      haveJob = true
    }
    if (rand.happens(isCrazyP)) {
      isCrazy = true
    }
    val lifeTime = rand.between(0, 100)
    val birthDate = rand.between(0, SIM_DURATION * 365)
    new Person(
      model,
      subscribed,
      sex,
      single,
      socialRank,
      haveJob,
      isCrazy,
      lifeTime,
      birthDate,
      this,
      index)
  }

  def addFriend(id1: Int, id2: Int) {
    val friendSet1: Set[Int] = friendship(id1)
    friendship += (id1 -> (friendSet1 + id2))
    val friendSet2: Set[Int] = friendship(id2)
    friendship += (id2 -> (friendSet2 + id1))
  }

  def addRandomFriendsAndSubscribers(id1: Int, n: Int) {

    var number = n
    if (n > population.size) {
      number = population.size
    }
    for (j <- 0 to number) {
      //Get random index
      var found: Boolean = false
      var ind = 0
      while (!found) {
        ind = rand.between(0, index)
        if (population.contains(ind) && !friendship.get(id1).get.contains(ind)) {
          found = true
        }
      }
      subscribe(ind)
      addFriend(id1, ind)
    }
  }

  def addRandomFriends(id1: Int, n: Int) {

    var number = n
    if (n > population.size) {
      number = population.size
    }
    for (j <- 0 to number) {
      var found: Boolean = false
      var ind = 0
      while (!found) {
        ind = rand.between(0, index)
        if (population.contains(ind)) {
           val person:Person = population.get(ind).get
           if(person.subscribed && !friendship.get(id1).get.contains(ind)){
             found = true
           }
        }
      }
      addFriend(id1, ind)
    }
  }

  def removeFriend(id1: Int, id2: Int) {
    val friendSet1: Set[Int] = friendship(id1)
    friendship += (id1 -> (friendSet1 - id2))
    val friendSet2: Set[Int] = friendship(id2)
    friendship += (id2 -> (friendSet2 - id1))
  }
  
  def getStats() = {
    val sb = new StringBuilder()
    
    val popSize = population.size
    val subscribedNbr = subscribed.size
    val subscribedPrct = subscribedNbr*100/popSize
    
    var meanFriendNbr = 0
    
    for(user <- subscribed) {
      meanFriendNbr += friendship(user).size
    }
    meanFriendNbr = meanFriendNbr/subscribedNbr
    
    sb.append("Population size: "+popSize+"\n")
    sb.append("People subscribed: "+subscribedNbr+"\n")
    sb.append("Subscribed percentage: "+subscribedPrct+"\n")
    sb.append("Mean friend number: "+meanFriendNbr)
    sb.toString()
  }

  def print() = {
    var sb = new StringBuilder()
    sb.append("Population\n")
    sb.append("############\n[")
    population.foreach({ case (i, p) => sb.append(p.print() + ",\n") })
    sb.append("]\n############\n")
    sb.append("Subscribed\n")
    sb.append("############\n[")
    for(i <- subscribed) { sb.append(population.get(i).get.print() + ",\n") }
    sb.append("]\n############\n")
    sb.append("Friendship\n")
    sb.append("############\n[")
    friendship.foreach({ case (k, v) => sb.append("key " + k + " value " + v+",") })
    sb.append("]\n############\n")
    sb.toString()
  }
}
