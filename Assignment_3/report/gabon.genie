Objets et classes
----------------
Tout le code du DSL est situé dans le package dsl.
-SolverDSL
En premier lieu, nous avons créé une classe et un objet compagnon SolverDSL qui sera le coeur de notre DSL.  Il contient un solver et deux sets contenant respectivement les contraintes et les variables pour le solver.
En agissant de la sorte, nous ajoutons l'ensemble des contraintes et l'ensemble des variables uniquement lors de la résolution du solver, ce qui nous permettra.
Afin de pouvoir accéder à une variable simplement avec son nom, nous avons également une Map avec le nom en clé et la variable en valeur.  Via les méthodes getItem, nous retournons une variable.  Pour ces méthodes, nous avons opté pour un paramètre implicite.  En effet, le nom des variables est toujours composé de la même racine.  Ainsi, en déclarant une seule fois le paramètre, nous pourrons avoir la variable en indiquant seulement son numéro. 
Pourquoi en objet ?
En définnissant notre SolverDSL comme objet, nous le rendons accessible aux autres objets.  Ce choix d'implémentation nous a semblé le plus judicieux car ils nous permet, dans les objets Constraint et RangeVal, d'ajouter directement ces contraintes et ces variables à nos Set et ce, sans devoir appeler une méthode d'ajout dans la classe voulant créer un nouveau problème.
++++++++++Nous avons réécrit les méthodes solve et solvewith du solver afin de tenir compte de la spécificité de notre DSL.  En effet, comme nous n'ajoutons pas directement les contraintes et les variables au solver, nous devons le faire avant le premier appel de solver ou solverwith.  Pour être sur qu'i ls'agit du premier appel, nous avons un boolean isAdded.
Nous avons été obligé d'ajouter les contraintes et les variables qu'au premier appel de solve ou solvewith car nous voulions permettre à l'utilisateur de définir et d'ajouter directement ses contraintes et ses variables au solver, sans devoir passé par l'appel d'une méthode sur le SolverDSL.  Comme le seul moyen que nous avons trouvé se situe lors de la création d'un objet, nous pouvons nous retrouver avec trop d'objets comme dans le cas où nous appliquons une méthode sur un objet et que ca retourne un nouvel objet.  Ainsi, en passant par l'ajout dans un liste, nous ajoutons, dès la création d'un objet, cet objet dans sa liste et si nous lui appliquons une méthode, nous le retirons de la liste et nous ajoutons le nouvel objet créé.
fin +++++
-RangeVal
RangeVal est une classe étendant IntVar et permettant de représenter les variables d'un problème.
L'objet compagnon contient plusieurs conversions implicites dont une très intéressante allant de String vers RangeVal.  Comme SolverDSL est un objet, nous pouvons chercher si ce String est le nom d'une variable déjà présente dans le SolverDSL et, le cas échéant, renvoyer cette variable.  Aussi non, nous créons un nouveau RangeVal avec ce nom.

-Constraint
Constraint est une classe représentant les différentes contraintes du problème.  Nous y avons inclut les opérateur AND (&) et OR (|) entre eux.

-ArrayConstraint
ArrayConstraint est une classe nous permettant de représenter des ensemble de variables.  Avec cette construction, nous pouvons, facilement, créer des contraintes entre chaque variables de l'ensemble.  Cet objet est particulièrement intéressant quand chaque variable doit être différente ou égale.
+++++++Comme nous ne connaissons pas, à l'avance, le nombre de Sum qui composeront cet ArrayConstraint, nous avons utilisé une closure de Sum.

-S
S est un objet permettant de récupérer la somme de plusieurs variables.

-SumDsl
L'objet SumDsl encapsule Sum et nous permet d'effectuer toutes les comparateurs possibles afin de créer des contraintes.  Ainsi, on retrouve plus grand ou égual, plus petit ou égual, egual et différent. 
Nous avons également créé un objet compagnon et contenant plusieurs conversion implicite.


Problems
--------
Même si notre DSL permet la création de n'importe quel problème, nous avons ajouté, aus sein de notre DSL, plusieurs classes permettant de facilement résoudre certains problèmes connus.
Ainsi, dans le package "dsl.problems", nous retrouvons la classe Coloring pour résoudre le problème de colorier un ensemble en n'ayant la même couleur côte à côte, la classe Knapsack qui modélise le problème d'optimiser le remplissage d'un sac avec une utilité maximale, la classe NQueens qui propose de placer N reines sur un échiquier où chaque reine ne sait pas être atteinte par les autres reines en suivant les règles des échecs.
Afin d'uniformiser les différents problèmes, nous avons déclarer un trait "Problem" qui est étendu par chaque problème.  En plus d'offrir une structure commune pour chaque problème, ce trait permettra d'ajouter facilement un autre problème à notre catalogue de problèmes sans connaitre le mécanisme interne de notre DSL puisque le trait contient déjà l'implémentations de certaines méthodes.

Semantique
-----------
-Definition d'une variable :
Name -> (Range)
Exemple : "node0" -> (0 to 2)
Ecriture abrégée :
Name 
Définit une variable avec le nom Name et un range 0 to 1
Name to Value
Définit une variable avec le nom Name et un range 0 to Value

-Definition d'une contrainte :
SumDsl [>==|<==|equal|dif] SumDsl [Sum|RangeVal]
Nous avons également inclus des conversions implicites de IntVar vers Sum, de IntVar vers SumDsl, de int vers SumDsl, de Sum vers SumDsl et de Int vers Sum, ce qui nous offre plus de possibilités de création de contrainte.

-Definition d'un set de contraintes
ArrayConstraint [===,!==] ArrayConstraint  
+++++++++Avec ArrayConstraint qui prend un ensemble de Sum, via une closure.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-Somme de variables :
S(Range, Pas default =1, implicit param Name)
Renvoi variables avec le nom de variable Name dans le Range avec le Pas.
Comme chaque variable doit avoir un nom unique, nous remplacons toutes les occurences de % par toutes les valeurs de range. 

-Definition d'un problème
Il faut d'abord récupérer l'objet SolverDSL et y appliquer init pour être sur que l'objet ne contient pas d'anciennes contraintes et variables d'un problème précédemment.
Ensuite, on peut ajouter autant de variables que de contraintes et ce, directement comme indiqué dans la sémantique.
Nous avons ajouté la fonction assigned qui permet d'assigner toutes les variables.

Exemple "Magic Square"
+expli concept magic square
#debut exemple code#
1    val magicNumber = 3 // number of lines/columns
2    val items = magicNumber * magicNumber
3    val magicSum = 15
4    val zero = 0
5    val possibilities = zero.to(magicSum).toArray
6    implicit val v = "item_%"
7
8    var s = SolverDSL
9
10    for (i <- 0 until items) {
11      "item_" + i -> (0 to magicSum)
12    }
13
14    s.E(0 to 6, 3, i => {
15     S(i to (2 + i), 1) equal magicSum
16    })
17
18    S(0 to 8, 4) equal magicSum
19    S(2 to 6, 2) equal magicSum
20
21    s.E(0 to 2, 1, i => {
22      S(i to 6 + i, 3) equal magicSum
23    })
24
25    s.allVariables !== s.allVariables
26
27    if (s.solve) println(s.solution)
28    else println("infeasible")
#fin exemple code#
Ligne 1 à 5 : définitions de valeurs
Ligne 6 : définition d'une valeur implicite qui nous servira pour les paramètres implicites.  Elle indique le nom générique des variables
Ligne 8 : variable pointant vers l'objet SolverDSL
Ligne 10 à 12 : déclaration de toutes les variables
Ligne 14 à 16 : la somme des différentes lignes doivent être égales à magicSum (création de contraintes).  La fonction s.E() est une réécriture d'une loop.
Ligne 18 : La diagonale doit être égale à magicSum (création d'une contrainte).  Cette contrainte est écrite avec la somme de variables.
Ligne 19 : idem
Ligne 21 à 23 : idem que 14 à 16 mais pour les colonnes
Ligne 25 : tous les élements doivent être différent (création d'un ensemble de contrainte).  Cette ensemble de contrainte est écrite avec l'objet ArrayConstraint qui sont données par l'objet s.allVariables qui renvoit une closure de toutes les variables du solver.
